
Texteditor* active_editor;

// TODO: idea: there might be a per texteditor arena to hold all the lines

struct Texteditor {

    string file_name;

    Texteditor* next;
    Texteditor* prev;

    vec2 view_pos;
    vec2 cursor_pos;

    Line* first_line;

    Cursor cursor;
    Cursor selection_start;

    float32 glyph_height;
}

struct Cursor {
    Line* line;
    int32 column;
}

void insert_texteditor(Texteditor* ed) {

    if !active_editor {
        active_editor = ed;
        ed.next = ed;
        ed.prev = ed;
        return;
    }

    ed.next = active_editor.next;
    ed.prev = active_editor;

    if active_editor.next active_editor.next.prev = ed;
    active_editor.next = ed;

    active_editor = ed;
}

Texteditor* texteditor_new() {
    Texteditor* ed = malloc(sizeof Texteditor);

    ed.file_name = {null, 0};
    ed.next = null;
    ed.prev = null;

    ed.first_line = line_new();
    ed.cursor.line = ed.first_line;
    ed.cursor.column = 0;
    ed.selection_start = ed.cursor;
    ed.glyph_height = 0.05;

    ed.view_pos = {1, 0};

    return ed;
}

void texteditor_free(Texteditor* ed) {
    Line* line = ed.first_line;
    while line {
        sb_free(line.sb);
        let fl = line;
        line = line.next;
        free(fl);
    }

    if ed.file_name.chars free(ed.file_name.chars);

    ed.prev.next = ed.next;
    ed.next.prev = ed.prev;

    if ed == active_editor {
        if ed.prev != ed  active_editor = ed.prev;
        else active_editor = null;
    }

    free(ed);
}

struct Line {
    StringBuilder sb;
    Line* next;
    Line* prev;
}

Line* line_new() {
    Line* line = malloc(sizeof Line);
    line.sb = sb_create();
    line.next = null;
    line.prev = null;

    return line;
}

// returns the line that switched places with ln
Line* push_line(Line* ln) {
    let ln1 = ln.prev;
    let ln2 = ln;
    let ln3 = ln.next;
    let ln4 = ln.next.next;

    if ln1 ln1.next = ln3;
    ln3.prev = ln1;

    ln2.next = ln4;
    if ln4 ln4.prev = ln2;

    ln3.next = ln2;
    ln2.prev = ln3;

    return ln3;
}

void push_line_down(Line* ln) {
    if !ln.next return;

    ln = push_line(ln);
    if ln.prev == null active_editor.first_line = ln;
}

void push_line_up(Line* ln) {
    if !ln.prev return;
    push_line(ln.prev);
    if ln.prev == null active_editor.first_line = ln;
}

// returns true if cursor moved
bool move_cursor(Texteditor* ed, int32 m) {
    let old_loc = ed.cursor.column;
    ed.cursor.column = clamp(ed.cursor.column + m, 0, ed.cursor.line.sb.length as int32);
    return ed.cursor.column != old_loc;
}

void move_cursor_up(Texteditor* ed) {
    if ed.cursor.line.prev {
        ed.cursor.line = ed.cursor.line.prev;
        ed.cursor.column = clamp(ed.cursor.column, 0, ed.cursor.line.sb.length as int32);
    }
}

void move_cursor_down(Texteditor* ed) {
    if ed.cursor.line.next {
        ed.cursor.line = ed.cursor.line.next;
        ed.cursor.column = clamp(ed.cursor.column, 0, ed.cursor.line.sb.length as int32);
    }
}

void move_cursor_vertical(Texteditor* ed, int32 steps) {
    let ln = ed.cursor.line;

    if steps < 0 while ln.prev and steps++ < 0  ln = ln.prev;
    else         while ln.next and steps-- > 0  ln = ln.next;

    ed.cursor.line = ln;
    ed.cursor.column = clamp(ed.cursor.column, 0, ed.cursor.line.sb.length as int32);
}

void jump_cursor(Texteditor* ed, int32 dir) {
    char* cont = ed.cursor.line.sb.content;
    int32 offset = clamp(dir, -1, 0);

    while is_whitespace_or_null(cont[ed.cursor.column + offset]) and move_cursor(ed, dir);
    while is_punctuation(cont[ed.cursor.column + offset]) and move_cursor(ed, dir);
    while is_alphanumeric(cont[ed.cursor.column + offset]) and move_cursor(ed, dir);
}

void jump_cursor_vertical(Texteditor* ed, int32 dir) {
    Line* ln = ed.cursor.line;

    if dir == -1 {
        while ln.next and is_whitespace_or_empty(to_string(ln.sb)) ln = ln.next;
        while ln.next and !is_whitespace_or_empty(to_string(ln.sb)) ln = ln.next;
    } else {
        while ln.prev and is_whitespace_or_empty(to_string(ln.sb)) ln = ln.prev;
        while ln.prev and !is_whitespace_or_empty(to_string(ln.sb)) ln = ln.prev;
    }

    ed.cursor.line = ln;
    ed.cursor.column = clamp(ed.cursor.column, 0, ed.cursor.line.sb.length as int32);
}






void insert(Texteditor* ed, char c) {
    if c == '\n' {
        let line = line_new();

        let rest = *ed.cursor.line.sb.content[ed.cursor.column];
        sb_append(*line.sb, rest);

        ed.cursor.line.sb.length = ed.cursor.column as uint32;
        ed.cursor.line.sb.content[ed.cursor.line.sb.length] = 0 as char;

        // inserting line
        line.next = ed.cursor.line.next;
        line.prev = ed.cursor.line;
        if ed.cursor.line.next ed.cursor.line.next.prev = line;
        ed.cursor.line.next = line;

        ed.cursor.line = line;
        ed.cursor.column = 0;
        return;
    }

    string str = {*c, 1};
    sb_insert(*ed.cursor.line.sb, ed.cursor.column++, str);
}

void insert_tab(Texteditor* ed) {
    string str = make_string("    "); // TODO: hardcoded tabs to be 4 spaces
    sb_insert(*ed.cursor.line.sb, ed.cursor.column, str);
    ed.cursor.column += str.length as int32;
}

void delete(Texteditor* ed) {
    if ed.cursor.column {
        sb_remove(*ed.cursor.line.sb, --ed.cursor.column, 1);
        return;
    }

    Line* del = ed.cursor.line;
    Line* prev = del.prev;
    Line* next = del.next;

    if prev == null  return;

    prev.next = next;
    if next  next.prev = prev;

    ed.cursor.column = prev.sb.length as int32;
    ed.cursor.line = prev;

    sb_append(*prev.sb, del.sb.content);

    sb_free(del.sb);
    free(del);
}

enum Tokenkind {
    whitespace;
    word;
    keyword;
    punctuation;
    number_literal;
    string_literal;
    comment;
    unknown;
}

struct Token {
    string text;
    Tokenkind kind;
}


Token get_next_token(char* start) {
    Token token = {0};
    token.text.chars = start;
    token.text.length = 0;
    token.kind = .unknown;


    if is_letter(@start) or @start == '_' {
        token.kind = .word;

        int32 is_word_char(char c) {
            return is_alphanumeric(c) or c == '_';
        }

        while is_word_char(start[++token.text.length]);

        for i : 0 .. keywords_count if string_equals(token.text, keywords[i]) {
            token.kind = .keyword;
            break;
        }

        return token;
    }

    if is_whitespace(@start) {
        token.kind = .whitespace;

        while is_whitespace(start[++token.text.length]);
        return token;
    }

    if is_digit(@start) {
        token.kind = .number_literal;

        while is_digit(start[++token.text.length]);
        return token;
    }

    if start[0] == '/' and start[1] == '/' {
        token.kind = .comment;

        while start[++token.text.length];
        return token;
    }

    if @start == '"' {
        token.kind = .string_literal;

        while true {
            let c = start[++token.text.length];
            if c == '"' break;
            if c == 0 break;
        }

        token.text.length++;
        return token;
    }

    if is_punctuation(@start) {
        token.kind = .punctuation;
        token.text.length = 1;
        return token;
    }

    token.text.length = 1;
    return token;
}



void draw_texteditor_line(Line* line, vec2 pos, float32 height, uint32 line_number) {

    vec2 line_num_pos = pos;
    line_num_pos.x -= height * 2;
    draw_text_backwards(line_num_pos, height * 0.7, to_string(line_number), Gray);

    // print("Start of Line:\n");
    uint32 i = 0;
    while i < line.sb.length {
        let token = get_next_token(*line.sb.content[i]);
        // print("    ", token.kind as int32, " ", token.text.chars, " ", token.text.length, "\n");

        Color color = White;


        switch token.kind {
            // case .whitespace:     color = theme.whitespace; break;
            case .word:           color = theme.word; break;
            case .keyword:        color = theme.keyword; break;
            case .punctuation:    color = theme.punctuation; break;
            case .number_literal: color = theme.number_literal; break;
            case .string_literal: color = theme.string_literal; break;
            case .comment:        color = theme.comment; break;
            case .unknown:        color = theme.unknown; break;
        }

        pos = draw_text(pos, height, token.text, color);

        i += token.text.length;
    }

    // draw_text(pos, height, line.sb.content);
}

void draw_texteditor(Texteditor* ed) {

    { // draw contents
        vec2 pos = neg(ed.view_pos);
        uint32 line_number = 1;

        // count lines up until cursor
        Line* line = ed.first_line;
        while line != ed.cursor.line {
            pos.y -= ed.glyph_height;

            line = line.next;
            line_number++;
        }

        // draw cursor
        vec2 cursor_size = { ed.glyph_height * 0.5, ed.glyph_height };
        ed.cursor_pos = pos;
        ed.cursor_pos.x += ed.cursor.column * cursor_size.x;
        draw_rect(ed.cursor_pos, cursor_size);
        ed.cursor_pos = add(ed.cursor_pos, ed.view_pos);

        draw_texteditor_line(line, pos, ed.glyph_height, line_number);

        int32 lines_on_page = (2 / ed.glyph_height) as int32;
        vec2 line_pos = pos;

        for i : 0 .. lines_on_page {
            line_pos.y += ed.glyph_height;
            if line.prev line = line.prev;
            else break;
            draw_texteditor_line(line, line_pos, ed.glyph_height, (line_number - i - 1) as uint32);
        }

        line_pos = pos;
        line = ed.cursor.line;

        for i : 0 .. lines_on_page {
            line_pos.y -= ed.glyph_height;
            if line.next line = line.next;
            else break;
            draw_texteditor_line(line, line_pos, ed.glyph_height, (line_number + i + 1) as uint32);
        }
    }

    { // draw tabs:
        const tab_text_height = 0.05;
        vec2 pos = { -1.5, 1 - tab_text_height * 0.5 };
        let current_ed = ed;
        loop: {
            char* name = current_ed.file_name.chars ? current_ed.file_name.chars : "untitled";
            pos = draw_text(pos, tab_text_height, name, White);

            pos.x += tab_text_height * 2;

            current_ed = current_ed.next;
            if current_ed != ed goto loop;
        }
    }
}

Texteditor* open_text_file(char* file_name) {

    let ed = texteditor_new();
    insert_texteditor(ed);
    ed.file_name = alloc_string_copy(file_name);

    char* buffer = fileread(file_name);
    char* current = buffer;
    char* start_of_line = current;

    let line = ed.first_line;

    while @current {
        if @current == '\n' {
            sb_append(*line.sb, { start_of_line, (current - start_of_line) as uint32 } as string);
            start_of_line = (current as uint64 + 1) as char*;

            let l = line_new();
            l.prev = line;
            line.next = l;
            line = l;
        }
        current++;
    }

    sb_append(*line.sb, { start_of_line, (current - start_of_line) as uint32 } as string);

    free(buffer);
    return ed;
}

void save_file(Texteditor* ed) {

    static StringBuilder sb = sb_create();
    sb_clear(*sb);

    let line = ed.first_line;
    while line {
        sb_append(*sb, line.sb.content);
        sb_append(*sb, "\n");
        line = line.next;
    }
    sb_remove(*sb, (sb.length - 1) as int32, 1); // remove trailing '\n'

    let file_name = ed.file_name.chars ? ed.file_name.chars : "untitled.pog";

    print("SAVING: ", file_name, "\n");
    print(sb.content, "\n\n");
    filewrite(file_name, sb.content);

    { // parser test
        let parser = init_parser();
        parser_parse_source(parser, sb.content);
        parse(parser);
    }

}



// returns wheter or not the input was handeld
bool text_editor_recive_keyboard_input(Texteditor* ed, int32 key, int32 mods) {
    switch (mods) {
        case 0: switch (key) {
            case GLFW_KEY_ENTER: insert(ed, '\n'); break;
            case GLFW_KEY_BACKSPACE: delete(ed); break;
            case GLFW_KEY_TAB: insert_tab(ed); break;

            case GLFW_KEY_KP_7:
            case GLFW_KEY_HOME: ed.cursor.column = 0; break;
            case GLFW_KEY_KP_1:
            case GLFW_KEY_END: ed.cursor.column = ed.cursor.line.sb.length as int32; break;

            case GLFW_KEY_RIGHT: move_cursor(ed, 1); break;
            case GLFW_KEY_LEFT: move_cursor(ed, -1); break;
            case GLFW_KEY_DOWN: move_cursor_down(ed); break;
            case GLFW_KEY_UP: move_cursor_up(ed); break;

            case GLFW_KEY_PAGE_UP: {
                int32 num_lines_on_page = (2 / ed.glyph_height) as int32;
                move_cursor_vertical(ed, -num_lines_on_page);
            } break;
            case GLFW_KEY_PAGE_DOWN: {
                int32 num_lines_on_page = (2 / ed.glyph_height) as int32;
                move_cursor_vertical(ed, num_lines_on_page);
            } break;
        } break;


        case GLFW_MOD_CONTROL: switch (key) {

            case GLFW_KEY_RIGHT: jump_cursor(ed,  1); break;
            case GLFW_KEY_LEFT:  jump_cursor(ed, -1); break;
            case GLFW_KEY_DOWN: jump_cursor_vertical(ed, -1); break;
            case GLFW_KEY_UP:   jump_cursor_vertical(ed,  1); break;

            case GLFW_KEY_S: save_file(ed); break;
        } break;

        case GLFW_MOD_ALT: switch (key) {
            case GLFW_KEY_DOWN: push_line_down(ed.cursor.line); break;
            case GLFW_KEY_UP: push_line_up(ed.cursor.line); break;
        } break;

    }

    return false;
}