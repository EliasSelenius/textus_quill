
Texteditor* active_editor;

// TODO: idea: there might be a per texteditor arena to hold all the lines

struct Texteditor {
    string file_name;

    Texteditor* next;
    Texteditor* prev;

    vec2 view_pos;
    vec2 target_view_pos;

    Textbuffer buf;
    Cursor cursor;
    bool follow_cursor;

    float32 glyph_height;
}

void write(Texteditor* ed, string str) insert(*ed.buf, *ed.cursor, str);
void write(Texteditor* ed, char c) {
    ed.follow_cursor = true;
    insert(*ed.buf, *ed.cursor, c);
}

vec2 calc_cursor_pos(Texteditor* ed) return calc_view_pos(ed, ed.cursor.row, ed.cursor.column);
vec2 calc_view_pos(Texteditor* ed, uint32 row, col) {
    vec2 size = { ed.glyph_height * 0.5, ed.glyph_height };
    vec2 pos = {};
    pos.x += col * size.x;
    pos.y -= row * size.y;
    return pos;
}

Texteditor* texteditor_new() {
    Texteditor* ed = malloc(sizeof Texteditor);
    ed.file_name = {null, 0};
    ed.buf = create_textbuffer();
    ed.cursor = {};
    ed.glyph_height = 0.05;
    ed.view_pos = {1, 0};

    if active_editor == null {
        active_editor = ed;
        ed.next = ed;
        ed.prev = ed;
    } else {
        ed.next = active_editor.next;
        ed.prev = active_editor;

        if active_editor.next active_editor.next.prev = ed;
        active_editor.next = ed;

        active_editor = ed;
    }

    return ed;
}

Texteditor* texteditor_open_file(char* file_name) {
    let ed = texteditor_new();
    ed.file_name = alloc_string_copy(file_name);
    char* content = fileread(file_name);
    textbuffer_init(*ed.buf, content);
    free(content);
    return ed;
}

void texteditor_free(Texteditor* ed) {
    textbuffer_free(ed.buf);

    if ed.file_name.chars free(ed.file_name.chars);

    ed.prev.next = ed.next;
    ed.next.prev = ed.prev;

    if ed == active_editor {
        if ed.prev != ed  active_editor = ed.prev;
        else active_editor = null;
    }

    free(ed);
}

void texteditor_save_file(Texteditor* ed) {

    StringBuilder sb = sb_create();
    textbuffer_to_string(*ed.buf, *sb);

    let file_name = ed.file_name.chars ? ed.file_name.chars : "untitled.pog";

    print("SAVING: ", file_name, "\n");
    print(sb.content, "\n\n");
    filewrite(file_name, sb.content);

    { // parser test
        let parser = init_parser();
        parser_parse_source(parser, sb.content);
        parse(parser);
    }

    sb_free(sb);
}




enum Tokenkind {
    whitespace;
    word;
    keyword;
    punctuation;
    number_literal;
    string_literal;
    comment;
    unknown;
}

struct Token {
    string text;
    Tokenkind kind;
}

Token get_next_token(char* start) {
    Token token = {0};
    token.text.chars = start;
    token.text.length = 0;
    token.kind = .unknown;


    if is_letter(@start) or @start == '_' {
        token.kind = .word;

        int32 is_word_char(char c) {
            return is_alphanumeric(c) or c == '_';
        }

        while is_word_char(start[++token.text.length]);

        for i : 0 .. language_mode.keywords.length if string_equals(token.text, language_mode.keywords[i]) {
            token.kind = .keyword;
            break;
        }

        return token;
    }

    if is_whitespace(@start) {
        token.kind = .whitespace;

        while is_whitespace(start[++token.text.length]);
        return token;
    }

    if is_digit(@start) {
        token.kind = .number_literal;

        while is_digit(start[++token.text.length]);
        return token;
    }

    if start[0] == '/' and start[1] == '/' {
        token.kind = .comment;

        while start[++token.text.length];
        return token;
    }

    if @start == '"' or @start == '\'' {
        let end = @start;
        token.kind = .string_literal;

        bool escape = false;
        while true {
            let c = start[++token.text.length];
            if escape { escape = false; continue; }
            if c == '\\' { escape = true; continue; }
            if c == end break;
            if c == 0 break;
        }

        token.text.length++;
        return token;
    }

    if is_punctuation(@start) {
        token.kind = .punctuation;
        token.text.length = 1;
        return token;
    }

    token.text.length = 1;
    return token;
}


void draw_texteditor_line(RenderLayer* layer, TextbufferLine* line, vec2 pos, float32 height, uint32 line_number) {
    vec2 line_num_pos = pos;
    line_num_pos.x -= height * 2;
    text_backwards(layer, line_num_pos, height * 0.7, to_string(line_number), Gray);

    uint32 i = 0;
    while i < line.sb.length {
        let token = get_next_token(*line.sb.content[i]);
        pos = text(layer, pos, height, token.text, token_color(token.kind));
        i += token.text.length;
    }
}

void draw_texteditor(RenderLayer* layer, Texteditor* ed) {

    vec2 start = neg(ed.view_pos);
    let pos = start;

    // TODO: calculate the range of lines visible on screen
    for uint32 it : 0 .. list_length(ed.buf.lines) {
        draw_texteditor_line(layer, *ed.buf.lines[it], pos, ed.glyph_height, it + 1);

        pos.y -= ed.glyph_height;
        pos.x = start.x;
    }


    // draw cursor
    vec2 cursor_size = { ed.glyph_height * 0.5, ed.glyph_height };
    Color cursor_color = opacity(White, 0.4);
    rect(layer, sub(calc_cursor_pos(ed), ed.view_pos), cursor_size, cursor_color);


    { // draw tabs:
        const tab_text_height = 0.05;
        vec2 pos = app.top_left;
        pos.y -= tab_text_height * 0.5;
        pos.x += tab_text_height * 0.5;
        let current_ed = ed;
        loop: {
            char* name = current_ed.file_name.chars ? current_ed.file_name.chars : "untitled";
            pos = text(layer, pos, tab_text_height, name, White);

            pos.x += tab_text_height * 2;

            current_ed = current_ed.next;
            if current_ed != ed goto loop;
        }
    }
}

void text_editor_recive_keyboard_input(Texteditor* ed, int32 key, mods) {

    ed.follow_cursor = true;

    perform_cursor_operation(*ed.buf, *ed.cursor, key, mods);

    switch (mods) {
        case 0: switch (key) {
            case GLFW_KEY_PAGE_UP: {
                int32 num_lines_on_page = (2 / ed.glyph_height) as int32;
                move_cursor_vertical(*ed.buf, *ed.cursor, -num_lines_on_page);
            } break;
            case GLFW_KEY_PAGE_DOWN: {
                int32 num_lines_on_page = (2 / ed.glyph_height) as int32;
                move_cursor_vertical(*ed.buf, *ed.cursor, num_lines_on_page);
            } break;
        } break;

        case GLFW_MOD_CONTROL: switch (key) {
            case GLFW_KEY_S: texteditor_save_file(ed); break;
        } break;

        case GLFW_MOD_ALT: switch (key) {
        } break;
    }
}
