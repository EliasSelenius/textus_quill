
include "../plang/common/compiler.pog";
include "../grax/grax.pog";
include "../pog/modules/System/files.pog";

include "src/text_editor.pog";
include "src/textbuffer.pog";
include "src/theme.pog";
include "src/projects.pog";


// Compile:
// ..\plang\bin\plang.exe main.pog cflags -O3 -lglfw3dll -l..\plang\bin\pog_compiler
// ..\plang\bin\plang.exe main.pog cflags -lglfw3dll -l..\plang\bin\pog_compiler -O0 -g -fsanitize=address -fno-omit-frame-pointer


/*
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
*/


/* Big Time Ideas:
    - execution statistics: know which code paths are actually taken, how common they are, what errors may have occurred
    - integrated REPL: entire type system and API of the currently loaded project is exposed to REPL
    - memory graph
*/

/* TODO:
    - rename file
    - builtin terminal
    - display binary file
    - line color status in margin (is unsaved, is untracked addition for source controll)
    - measure words per minute

    intelisense engine:
    - texteditor internal text format -> tokens for parser
    - parse_unit()
    - bind_units()
    - cleanup after a unit so that rebinding can take place (use arenas)

    - scroll and click to place cursor

    priority:
        - file navigator
        - auto indentation when hit enter


    idea: pixel snap. make textures snap to screen pixels, might fix aliasing problems in textus quill

*/

// TODO: this immediate mode text input idea should be in grax
uint32 on_text_input_call_count = 0;
char* text_input_this_frame = malloc(128);


void on_event(AppEvent event, AppEventData data) switch (event) {
    case .file_drop: {
        glfwFocusWindow(app.main_window);

        for i : 0 .. data.files.length {
            let ed = texteditor_open_file(data.files[i]);
        }
    } break;

    case .key_repeat:
    case .key_press: {
        // print("[INFO]: \"", glfwGetKeyName(GLFW_KEY_UNKNOWN, data.scancode), "\" scancode: ", data.scancode, " key: ", data.key, " mods: ", data.mods, "\n");


        if file_selector.open {
            switch data.key {
                case GLFW_KEY_UP:   file_selector.selected_line--; break;
                case GLFW_KEY_DOWN: file_selector.selected_line++; break;
                case GLFW_KEY_ENTER: {
                    texteditor_open_file(file_selector.current_files[file_selector.selected_line].path.chars);
                    file_selector.open = false;
                } break;
                default: recive_keyboard_input(*file_selector.text_field, data.key, data.mods); break;
            }

            update_files();

        } else if active_editor {
            text_editor_recive_keyboard_input(active_editor, data.key, data.mods);
        }

        switch (data.mods) {
            case 0: switch (data.key) {
                case GLFW_KEY_ESCAPE: file_selector.open = false; break;
            } break;

            case GLFW_MOD_CONTROL: switch (data.key) {
                case GLFW_KEY_PAGE_UP: if active_editor.prev active_editor = active_editor.prev; break;
                case GLFW_KEY_PAGE_DOWN: if active_editor.next active_editor = active_editor.next; break;

                case GLFW_KEY_P: file_selector.open = true; update_files(); break;

                case GLFW_KEY_T: {
                    ColorTheme*[] themes = {
                        *theme_kimbie_dark,
                        *theme_programer_art
                    };

                    static uint32 i = 0;
                    set_theme(themes[i++ % themes.length]);
                } break;

                case GLFW_KEY_N: texteditor_new(); break;
                case GLFW_KEY_W: if active_editor texteditor_free(active_editor); break;
            } break;

            case GLFW_MOD_ALT: switch (data.key) {
            } break;
        }
    } break;

    case .text_input: {
        char c = '?';
        if data.unicode_codepoint <= 127 {
            c = data.unicode_codepoint as char;
        } else {
            print("[ERROR]: Unicode character ", to_string(data.unicode_codepoint), " not supported.\n");
        }


        if file_selector.open {
            insert(*file_selector.text_field.buf, *file_selector.text_field.cursor, c);
            update_files();
        } else if active_editor {
            write(active_editor, c);
        }

        text_input_this_frame[on_text_input_call_count++] = c;
    } break;

    default: break;
}

int32 main() {

    grax_init();
    app.on_event = on_event;

    init_themes();
    init_languages();

    texteditor_new();
    texteditor_open_file("src/textbuffer.pog");

    load_all_projects_in_folder("D:/Documents/repos");


    {
        let controls = texteditor_new();
        write(controls, make_string("\n\n"));
        write(controls, make_string("// Drag and drop files into this window to view and edit them\n\n\n"));

        write(controls, make_string("// Ctrl+N               --  New text buffer.\n"));
        write(controls, make_string("// Ctrl+S               --  Save text buffer.\n"));
        write(controls, make_string("// Ctrl+W               --  Close text buffer.\n"));
        write(controls, make_string("// Ctrl+page_up/down    --  Cycle text buffers.\n"));
        write(controls, make_string("// Ctrl+P               --  Blue screen your computer.\n"));
        write(controls, make_string("// Ctrl+arrow_keys      --  Jump over text.\n"));
        write(controls, make_string("// Alt+up/down          --  Move line up/down.\n"));
        write(controls, make_string("// Ctrl+\"-\"             --  Zoom out.\n"));
        write(controls, make_string("// Ctrl+\"=\"             --  Zoom in. I guess this only works on english keyboard layout, opsie.\n"));
        write(controls, make_string("// F11                  --  Toggle fullscreen mode.\n"));
        write(controls, make_string("// Ctrl+T               --  Change color theme.\n"));

        write(controls, make_string("\n\n"));
        write(controls, make_string("// Cycle to the next text buffer to see the source code for the editor viewed in itself.\n\n"));
    }


    {
        file_selector.layer = create_layer();
        immediate_layer.next_layer = *file_selector.layer;

        file_selector.text_field.buf = create_textbuffer();
        file_selector.text_field.cursor = {};

        update_files();
    }

    while grax_loop() {

        { // calc theme

            Color lerp(Color a, b, float32 t) return {
                a.r + (b.r-a.r)*t,
                a.g + (b.g-a.g)*t,
                a.b + (b.b-a.b)*t,
                a.a + (b.a-a.a)*t
            };


            let t = min(1.0, theme_lerp_factor);
            theme_lerp_factor += deltatime();

            theme.background     = lerp(prev_theme.background,     next_theme.background, t);
            theme.whitespace     = lerp(prev_theme.whitespace,     next_theme.whitespace, t);
            theme.word           = lerp(prev_theme.word,           next_theme.word, t);
            theme.keyword        = lerp(prev_theme.keyword,        next_theme.keyword, t);
            theme.punctuation    = lerp(prev_theme.punctuation,    next_theme.punctuation, t);
            theme.number_literal = lerp(prev_theme.number_literal, next_theme.number_literal, t);
            theme.string_literal = lerp(prev_theme.string_literal, next_theme.string_literal, t);
            theme.comment        = lerp(prev_theme.comment,        next_theme.comment, t);
            theme.unknown        = lerp(prev_theme.unknown,        next_theme.unknown, t);

            set_clear_color(theme.background);
        }


        let ed = active_editor;
        if ed {

            void zoom(Texteditor* ed, float32 zoom) {
                const speed = 0.05;
                ed.glyph_height *= 1.0 + speed*zoom;
                ed.view_pos.y   *= 1.0 + speed*zoom;
            }

            if key(GLFW_KEY_LEFT_CONTROL) {
                zoom(ed, input_axis('-', '='));
            }

            if mouse_scroll != 0.0 {
                if key(GLFW_KEY_LEFT_CONTROL) {
                    zoom(ed, mouse_scroll);
                } else {
                    ed.target_view_pos.y += mouse_scroll * 0.1;
                    ed.follow_cursor = false;
                }
            }


            if ed.follow_cursor {
                ed.target_view_pos = calc_cursor_pos(ed);
            }

            float32 decay = 5;
            float32 dt = app.frame_time;
            ed.view_pos.y = exp_decay(ed.view_pos.y, ed.target_view_pos.y, decay, dt);

            let p = sub(ed.target_view_pos, ed.view_pos);
            if abs(p.x) > 1  ed.view_pos.x = exp_decay(ed.view_pos.x, ed.target_view_pos.x, 1, dt);

            draw_texteditor(*immediate_layer, ed);


        } else draw_project_selection_menu();

        if file_selector.open {
            render_file_selection_menu(*file_selector.layer);
        }


        // const border_thickness = 0.005;
        // draw_rect(make_vec(-1, 0), make_vec(border_thickness, 2), Red);
        // draw_rect(make_vec(1, 0), make_vec(border_thickness, 2), Red);

        text_input_this_frame[on_text_input_call_count] = 0;
        // if on_text_input_call_count != 0 print("\"", text_input_this_frame, "\"\n");
        on_text_input_call_count = 0;
    }

    return 0;
}

struct FileSelectorPanel {
    RenderLayer layer;
    FileInfo* current_files; // list
    uint32 selected_line;
    bool open;

    TextInputField text_field;
}

FileSelectorPanel file_selector;

void update_files() {
    if file_selector.current_files {
        for 0 .. list_length(file_selector.current_files) {
            free(file_selector.current_files[it].path.chars); // TODO: should realy be using some kind of temp allocator instead
        }
        list_delete(file_selector.current_files);
    }

    char* query = concat("*", file_selector.text_field.buf.lines[0].sb.content, "*");
    print("query: ", query, "\n");
    file_selector.current_files = query_files(make_string(query));
    for 0 .. list_length(file_selector.current_files) {
        let file = file_selector.current_files[it];
        print(file, "\n");
    }
}

void render_file_selection_menu(RenderLayer* layer) {
    vec2 size = make_vec(1.5, 1.8);
    const glyph_height = 0.08;

    vec2 path_start = { -size.x / 2, size.y / 2 - glyph_height / 2 };
    rect(layer, vec2_zero, size, Blue);
    text(layer, path_start, glyph_height, to_string(file_selector.text_field.buf.lines[0].sb), White);


    vec2 list_start = path_start + make_vec(0.1, -0.1);
    vec2 list_pos = list_start;
    uint32 list_len = list_length(file_selector.current_files);
    for 0 .. list_len {
        text(layer, list_pos, glyph_height, file_selector.current_files[it].path, White);
        list_pos.y -= glyph_height * 1.2;
    }

    int32 index = file_selector.selected_line as int32;
    int32 max_index = (list_len-1) as int32;
    if index < 0 {
        index = max_index;
    } else if index > max_index {
        index = 0;
    }

    file_selector.selected_line = index as uint32;

    rect(layer, make_vec(0, list_start.y + glyph_height * -1.2 * file_selector.selected_line), make_vec(size.x, glyph_height), opacity(White, 0.2));
}







void render_keybinds_menu(RenderLayer* layer) {
    float32 width = 2;

    // English-US:
    // ` 1 2 3 4 5 6 7 8 9 0 - = backspace
    // tab q w e r t y u i o p [ ]
    // caps a s d f g h j k l ; ' \
    // shift \ z x c v b n m , . / shift

    // Norwegian:
    // | 1 2 3 4 5 6 7 8 9 0 + \ backspace
    // tab q w e r t y u i o p å ¨
    // caps a s d f g h j k l ø æ '
    // shift < z x c v b n m , . - shift

    // Esperanto:
    // ` 1 2 3 4 5 6 7 8 9 0 - = backspace
    // tab ŝ ŭ e r t ĵ u i o p ĝ ĥ
    // caps a s d f g h j k l ; ' \
    // shift \ z ĉ c v b n m , . / shift

}
