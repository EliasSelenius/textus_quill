
include "../plang/common/compiler.pog";
include "../grax/grax.pog";
include "text_editor.pog";
include "theme.pog";

// Compile:
// ../plang/bin/plang.exe main.pog cflags -lglfw3dll -l../plang/bin/pog_compiler


/*
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
*/

/* TODO:
    - tokenize
        - string/char literals
    <Done> - saving files (existing and new files)
    - text selection
    - del key
    - shift-del to delete line and put into clipboard
    <Done> - ctrl-jump horizontal
    <Done> - ctrl-jump vertical
    - rename file
    - builtin terminal
    - display binary file

    intelisense engine:
    - texteditor internal text format -> tokens for parser
    - parse_unit()
    - bind_units()
    - get list of errors to report instead of parser calling exit()
    - cleanup after a unit so that rebinding can take place
*/


void on_text_input(GLFWwindow* w, uint32 codepoint) {
    char c = codepoint as char;
    // print("codepoint: ", codepoint, "\n");
    insert(active_editor, c);
}

void on_key_input(GLFWwindow* window, int32 key, int32 scancode, int32 action, int32 mods) {
    // print(key, " ", scancode, " ", action, " ", mods, "\n");

    if action == GLFW_RELEASE return;

    switch (mods) {
        case 0: switch (key) {
            case GLFW_KEY_ENTER: insert(active_editor, '\n'); break;
            case GLFW_KEY_BACKSPACE: delete(active_editor); break;
            case GLFW_KEY_TAB: insert_tab(active_editor); break;

            case GLFW_KEY_KP_7:
            case GLFW_KEY_HOME: active_editor.cursor.column = 0; break;
            case GLFW_KEY_KP_1:
            case GLFW_KEY_END: active_editor.cursor.column = active_editor.cursor.line.sb.length as int32; break;

            case GLFW_KEY_RIGHT: move_cursor(active_editor, 1); break;
            case GLFW_KEY_LEFT: move_cursor(active_editor, -1); break;
            case GLFW_KEY_DOWN: move_cursor_down(active_editor); break;
            case GLFW_KEY_UP: move_cursor_up(active_editor); break;

            case GLFW_KEY_F11: toggle_fullscreen(main_window); break;

            case GLFW_KEY_PAGE_UP: {
                int32 num_lines_on_page = (2 / active_editor.glyph_height) as int32;
                move_cursor_vertical(active_editor, -num_lines_on_page);
            } break;
            case GLFW_KEY_PAGE_DOWN: {
                int32 num_lines_on_page = (2 / active_editor.glyph_height) as int32;
                move_cursor_vertical(active_editor, num_lines_on_page);
            } break;
        } break;


        case GLFW_MOD_CONTROL: switch (key) {

            case GLFW_KEY_RIGHT: jump_cursor(active_editor,  1); break;
            case GLFW_KEY_LEFT:  jump_cursor(active_editor, -1); break;
            case GLFW_KEY_DOWN: jump_cursor_vertical(active_editor, -1); break;
            case GLFW_KEY_UP:   jump_cursor_vertical(active_editor,  1); break;


            case GLFW_KEY_PAGE_UP: if active_editor.prev active_editor = active_editor.prev; break;
            case GLFW_KEY_PAGE_DOWN: if active_editor.next active_editor = active_editor.next; break;

            case GLFW_KEY_S: save_file(active_editor); break;

            case GLFW_KEY_N: {
                let ed = texteditor_new();
                insert_texteditor(ed);
            } break;

            case GLFW_KEY_W: {

            } break;
        } break;

        case GLFW_MOD_ALT: switch (key) {
            case GLFW_KEY_DOWN: push_line_down(active_editor.cursor.line); break;
            case GLFW_KEY_UP: push_line_up(active_editor.cursor.line); break;
        } break;

    }
}

void on_drop(GLFWwindow* window, int32 path_count, char** paths) {

    glfwFocusWindow(window);

    for i : 0 .. path_count {
        let ed = texteditor_new();
        insert_texteditor(ed);

        load_file(active_editor, paths[i]);
    }
}

void on_window_focus(GLFWwindow* window, int32 focused) {
    if focused {
        // glfwSetWindowOpacity(window, 1);
    } else {
        // glfwSetWindowOpacity(window, 0.5);
    }
}

int32 main() {

    active_editor = texteditor_new();
    active_editor.prev = active_editor;
    active_editor.next = active_editor;


    init_parser();
    init_string_table();


    grax_init();
    glfwSetCharCallback(main_window, on_text_input);
    glfwSetKeyCallback(main_window, on_key_input);
    glfwSetDropCallback(main_window, on_drop);
    glfwSetWindowFocusCallback(main_window, on_window_focus);


    init_themes();

    view_pos.x = 1;

    while grax_loop() {

        // if key(GLFW_KEY_UP) view_pos.y += 0.1;
        // if key(GLFW_KEY_DOWN) view_pos.y -= 0.1;

        if key(GLFW_KEY_LEFT_CONTROL) {
            if key('-') {
                active_editor.glyph_height *= 0.9;
                view_pos.y = active_editor.cursor_pos.y * 0.9;
            } else if key('=') {
                active_editor.glyph_height *= 1.1;
                view_pos.y = active_editor.cursor_pos.y * 1.1;
            }
        }

        draw_texteditor(active_editor);
        // glUniform2f(glGetUniformLocation(shader.gl_handle, "view_pos"), view_pos.x, view_pos.y);


        view_pos.y = lerp(0.1, view_pos.y, active_editor.cursor_pos.y);
    }

    return 0;
}
