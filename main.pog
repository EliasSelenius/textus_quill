
include "../plang/common/compiler.pog";
include "../grax/grax.pog";
include "src/text_editor.pog";
include "src/theme.pog";
include "src/projects.pog";

// Compile:
// -O0 -g -fsanitize=address -fno-omit-frame-pointer
// ../plang/bin/plang.exe main.pog cflags -g -lglfw3dll -l../plang/bin/pog_compiler


/*
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
*/

/* TODO:
    - tokenize
        - string/char literals
    <Done> - saving files (existing and new files)
    - text selection
    - del key
    - shift-del to delete line and put into clipboard
    <Done> - ctrl-jump horizontal
    <Done> - ctrl-jump vertical
    - rename file
    - builtin terminal
    - display binary file

    intelisense engine:
    - texteditor internal text format -> tokens for parser
    - parse_unit()
    - bind_units()
    - get list of errors to report instead of parser calling exit()
    - cleanup after a unit so that rebinding can take place (use arenas)
*/


uint32 on_text_input_call_count = 0;

char* text_input_this_frame = malloc(128);

void on_text_input(GLFWwindow* w, uint32 codepoint) {
    char c = codepoint as char;
    // print("codepoint: ", codepoint, "\n");
    if active_editor insert(active_editor, c);

    text_input_this_frame[on_text_input_call_count++] = c;
}


void on_key_input(GLFWwindow* window, int32 key, int32 scancode, int32 action, int32 mods) {

    if action == GLFW_RELEASE return;

    if active_editor and text_editor_recive_keyboard_input(active_editor, key, mods)  return;

    switch (mods) {
        case 0: switch (key) {
            case GLFW_KEY_F11: toggle_fullscreen(main_window); break;
        } break;

        case GLFW_MOD_CONTROL: switch (key) {
            case GLFW_KEY_PAGE_UP: if active_editor.prev active_editor = active_editor.prev; break;
            case GLFW_KEY_PAGE_DOWN: if active_editor.next active_editor = active_editor.next; break;

            case GLFW_KEY_N: insert_texteditor(texteditor_new()); break;
            case GLFW_KEY_W: texteditor_free(active_editor); break;
        } break;

        case GLFW_MOD_ALT: switch (key) {
        } break;
    }
}

void on_drop(GLFWwindow* window, int32 path_count, char** paths) {

    glfwFocusWindow(window);

    for i : 0 .. path_count {
        let ed = open_text_file(paths[i]);
    }
}

void on_window_focus(GLFWwindow* window, int32 focused) {
    if focused {
        // glfwSetWindowOpacity(window, 1);
    } else {
        // glfwSetWindowOpacity(window, 0.5);
    }
}

int32 main() {

    load_all_projects_in_folder("D:/Documents/repos");

    insert_texteditor(texteditor_new());
    open_text_file("src/text_editor.pog");


    grax_init();
    glfwSetCharCallback(main_window, on_text_input);
    glfwSetKeyCallback(main_window, on_key_input);
    glfwSetDropCallback(main_window, on_drop);
    glfwSetWindowFocusCallback(main_window, on_window_focus);


    init_themes();



    let files = get_all_files("src", false);
    for 0 .. list_length(files) {
        print(files[it], "\n");
    }
    list_delete(files);

    while grax_loop() {

        // if key(GLFW_KEY_UP) view_pos.y += 0.1;
        // if key(GLFW_KEY_DOWN) view_pos.y -= 0.1;

        if key(GLFW_KEY_LEFT_CONTROL) {
            if key('-') {
                active_editor.glyph_height *= 0.9;
                active_editor.view_pos.y = active_editor.cursor_pos.y * 0.9;
            } else if key('=') {
                active_editor.glyph_height *= 1.1;
                active_editor.view_pos.y = active_editor.cursor_pos.y * 1.1;
            }
        }


        if active_editor {
            active_editor.view_pos.y += mouse_scroll * 0.1;

            draw_texteditor(active_editor);

            active_editor.view_pos.y = lerp(0.1, active_editor.view_pos.y, active_editor.cursor_pos.y);

        } else draw_project_selection_menu();


        text_input_this_frame[on_text_input_call_count] = 0;
        // if on_text_input_call_count != 0 print("\"", text_input_this_frame, "\"\n");
        on_text_input_call_count = 0;
    }

    return 0;
}
