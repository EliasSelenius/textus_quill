

// Compile:
// ../plang/bin/plang.exe main.pog cflags -lglfw3dll


// Teksus Quill

/*

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

*/

/* TODO:

    - tokenize
        - string/char literals
    - saving files (existing and new files)
    - text selection
    - del key
    - shift-del to delete line
    - ctrl-jump horizontal
    - ctrl-jump vertical

*/

include "../grax/grax.pog";
include "../grax/string.pog";

Texteditor* editor;
ColorTheme* theme;

vec2 view_pos;

struct Texteditor {

    char* file_name;

    Texteditor* next;
    Texteditor* prev;

    vec2 cursor_pos;

    Line* first_line;

    // Line* current_line;
    // int32 column;

    Cursor cursor;
    Cursor selection_start;

    float32 glyph_height;

}

struct Cursor {
    Line* line;
    int32 column;
}

void insert_texteditor(Texteditor* ed) {
    ed.next = editor.next;
    ed.prev = editor;

    if editor.next editor.next.prev = ed;
    editor.next = ed;

    editor = ed;
}

Texteditor* texteditor_new() {
    Texteditor* ed = malloc(sizeof Texteditor);

    ed.file_name = null;
    ed.next = null;
    ed.prev = null;

    ed.first_line = line_new();
    ed.cursor.line = ed.first_line;
    ed.cursor.column = 0;
    ed.selection_start = ed.cursor;
    ed.glyph_height = 0.05;

    return ed;
}

struct Line {
    StringBuilder sb;
    Line* next;
    Line* prev;
}

Line* line_new() {

    // static Line* pool = null;

    Line* line = malloc(sizeof Line);
    line.sb = sb_create();
    line.next = null;
    line.prev = null;

    return line;
}

// returns the line that switched places with ln
Line* push_line(Line* ln) {
    let ln1 = ln.prev;
    let ln2 = ln;
    let ln3 = ln.next;
    let ln4 = ln.next.next;

    if ln1 ln1.next = ln3;
    ln3.prev = ln1;

    ln2.next = ln4;
    if ln4 ln4.prev = ln2;

    ln3.next = ln2;
    ln2.prev = ln3;

    return ln3;
}

void push_line_down(Line* ln) {
    if !ln.next return;

    ln = push_line(ln);
    if ln.prev == null editor.first_line = ln;
}

void push_line_up(Line* ln) {
    if !ln.prev return;
    push_line(ln.prev);
    if ln.prev == null editor.first_line = ln;
}


void move_cursor(Texteditor* ed, int32 m) {
    // ed.cursor = clamp(ed.cursor, 0, ed.sb.length as int32);
    ed.cursor.column = clamp(ed.cursor.column + m, 0, ed.cursor.line.sb.length as int32);
}

void move_cursor_up(Texteditor* ed) {
    if ed.cursor.line.prev {
        ed.cursor.line = ed.cursor.line.prev;
        ed.cursor.column = clamp(ed.cursor.column, 0, ed.cursor.line.sb.length as int32);
    }
}

void move_cursor_down(Texteditor* ed) {
    if ed.cursor.line.next {
        ed.cursor.line = ed.cursor.line.next;
        ed.cursor.column = clamp(ed.cursor.column, 0, ed.cursor.line.sb.length as int32);
    }
}

void insert(Texteditor* ed, char c) {
    if c == @"\n" {
        let line = line_new();

        let rest = *ed.cursor.line.sb.content[ed.cursor.column];
        sb_append(*line.sb, rest);

        ed.cursor.line.sb.length = ed.cursor.column as uint32;
        ed.cursor.line.sb.content[ed.cursor.line.sb.length] = 0 as char;

        // inserting line
        line.next = ed.cursor.line.next;
        line.prev = ed.cursor.line;
        if ed.cursor.line.next ed.cursor.line.next.prev = line;
        ed.cursor.line.next = line;

        ed.cursor.line = line;
        ed.cursor.column = 0;
        return;
    }

    string str = {*c, 1};
    sb_insert(*ed.cursor.line.sb, ed.cursor.column++, str);
}

void insert_tab(Texteditor* ed) {
    string str = make_string("    "); // TODO: hardcoded tabs to be 4 spaces
    sb_insert(*ed.cursor.line.sb, ed.cursor.column, str);
    ed.cursor.column += str.length as int32;
}

void delete(Texteditor* ed) {

    if ed.cursor.column == 0 {
        if ed.cursor.line.prev {
            ed.cursor.line.prev.next = ed.cursor.line.next;
            if ed.cursor.line.next ed.cursor.line.next.prev = ed.cursor.line.prev;

            ed.cursor.column = ed.cursor.line.prev.sb.length as int32;
            sb_append(*ed.cursor.line.prev.sb, ed.cursor.line.sb.content);

            let del_line = ed.cursor.line;
            ed.cursor.line = ed.cursor.line.prev;
            free(del_line); // TODO: pool up deleted lines and reuse
        }
        return;
    }

    sb_remove(*ed.cursor.line.sb, --ed.cursor.column, 1);
}

enum Tokenkind {
    whitespace;
    word;
    keyword;
    punctuation;
    number_literal;
    string_literal;
    comment;
    unknown;
}

struct Token {
    string text;
    Tokenkind kind;
}

const keywords_count = 29;
string* keywords;


Token get_next_token(char* start) {
    Token token = {0};
    token.text.chars = start;
    token.text.length = 0;
    token.kind = .unknown;


    if is_letter(@start) {
        token.kind = .word;

        int32 is_word_char(char c) {
            return is_alphanumeric(c) or c == '_';
        }

        while is_word_char(start[++token.text.length]);

        for i in 0 .. keywords_count if string_equals(token.text, keywords[i]) {
            token.kind = .keyword;
            break;
        }

        return token;
    }

    if is_whitespace(@start) {
        token.kind = .whitespace;

        while is_whitespace(start[++token.text.length]);
        return token;
    }

    if is_digit(@start) {
        token.kind = .number_literal;

        while is_digit(start[++token.text.length]);
        return token;
    }

    if start[0] == '/' and start[1] == '/' {
        token.kind = .comment;

        while start[++token.text.length];
        return token;
    }

    if @start == '"' {
        token.kind = .string_literal;

        while true {
            let c = start[++token.text.length];
            if c == '"' break;
            if c == 0 break;
        }

        token.text.length++;
        return token;
    }

    if is_punctuation(@start) {
        token.kind = .punctuation;
        token.text.length = 1;
        return token;
    }

    token.text.length = 1;
    return token;
}

struct ColorTheme {
    Grax.Color background;

    // Tokens:
    // Color whitespace;
    Grax.Color word;
    Grax.Color keyword;
    Grax.Color punctuation;
    Grax.Color number_literal;
    Grax.Color string_literal;
    Grax.Color comment;
    Grax.Color unknown;


}

void draw_texteditor_line(Line* line, vec2 pos, float32 height, uint32 line_number) {

    vec2 line_num_pos = pos;
    line_num_pos.x -= height * 2;
    Grax.draw_text_backwards(line_num_pos, height * 0.7, to_string(line_number), Grax.Gray);

    // print("Start of Line:\n");
    uint32 i = 0;
    while i < line.sb.length {
        let token = get_next_token(*line.sb.content[i]);
        // print("    ", token.kind as int32, " ", token.text.chars, " ", token.text.length, "\n");

        Grax.Color color = Grax.White;


        switch token.kind {
            // case .whitespace:     color = theme.whitespace; break;
            case .word:           color = theme.word; break;
            case .keyword:        color = theme.keyword; break;
            case .punctuation:    color = theme.punctuation; break;
            case .number_literal: color = theme.number_literal; break;
            case .string_literal: color = theme.string_literal; break;
            case .comment:        color = theme.comment; break;
            case .unknown:        color = theme.unknown; break;
        }

        pos = Grax.draw_text(pos, height, token.text, color);

        i += token.text.length;
    }

    // Grax.draw_text(pos, height, line.sb.content);
}

void draw_texteditor(Texteditor* ed) {

    { // draw contents
        vec2 pos = neg(view_pos);
        uint32 line_number = 1;


        // draw lines up until cursor
        Line* line = ed.first_line;
        while line != ed.cursor.line {
            // Grax.draw_text(pos, ed.glyph_height, line.sb.content);
            draw_texteditor_line(line, pos, ed.glyph_height, line_number);
            pos.y -= ed.glyph_height;

            line = line.next;
            line_number++;
        }

        // draw cursor
        vec2 cursor_size = { ed.glyph_height * 0.5, ed.glyph_height };
        ed.cursor_pos = pos;
        ed.cursor_pos.x += ed.cursor.column * cursor_size.x;
        Grax.draw_rect(ed.cursor_pos, cursor_size);

        ed.cursor_pos = add(ed.cursor_pos, view_pos);

        // draw remaining lines up until EoF
        while line {
            // Grax.draw_text(pos, ed.glyph_height, line.sb.content);
            draw_texteditor_line(line, pos, ed.glyph_height, line_number);
            pos.y -= ed.glyph_height;

            line = line.next;
            line_number++;
        }
    }

    {

        vec2 pos = { -1.5, 1 - ed.glyph_height * 0.5 };
        let current_ed = ed;
        loop: {
            char* name = current_ed.file_name ? current_ed.file_name : "untitled";
            pos = Grax.draw_text(pos, current_ed.glyph_height, name);

            pos.x += current_ed.glyph_height * 2;

            current_ed = current_ed.next;
            if current_ed != ed goto loop;
        }
    }
}

void load_file(Texteditor* ed, char* file_name) {

    ed.file_name = file_name;
    let file_name_length = strlen(file_name) + 1;
    ed.file_name = malloc(file_name_length);
    for i in 0 .. file_name_length ed.file_name[i] = file_name[i];

    char* buffer = fileread(file_name);

    Line* line = line_new();
    ed.first_line = line;
    ed.cursor.line = line;
    ed.cursor.column = 0;

    char* current = buffer;
    char* start_of_line = current;

    while @current {

        if @current == @"\n" {
            sb_append(*line.sb, { start_of_line, (current - start_of_line) as uint32 } as string);
            start_of_line = (current as uint64 + 1) as char*;

            let l = line_new();
            l.prev = line;
            line.next = l;
            line = l;
        }

        current++;
    }

    sb_append(*line.sb, { start_of_line, (current - start_of_line) as uint32 } as string);

    free(buffer);

    // line = ed.first_line;
    // while line {
    //     print("Line: \"", line.sb.content, "\"\n");
    //     line = line.next;
    // }
}


void on_text_input(GLFWwindow* w, uint32 codepoint) {
    char c = codepoint as char;
    // print("codepoint: ", codepoint, "\n");
    insert(editor, c);
}

void on_key_input(GLFWwindow* window, int32 key, int32 scancode, int32 action, int32 mods) {
    print(key, " ", scancode, " ", action, " ", mods, "\n");

    if action == GLFW_RELEASE return;

    switch mods {
        case 0: switch (key) {
            case GLFW_KEY_ENTER: insert(editor, @"\n"); break;
            case GLFW_KEY_BACKSPACE: delete(editor); break;
            case GLFW_KEY_TAB: insert_tab(editor); break;

            case GLFW_KEY_KP_7:
            case GLFW_KEY_HOME: editor.cursor.column = 0; break;
            case GLFW_KEY_KP_1:
            case GLFW_KEY_END: editor.cursor.column = editor.cursor.line.sb.length as int32; break;

            case GLFW_KEY_RIGHT: move_cursor(editor, 1); break;
            case GLFW_KEY_LEFT: move_cursor(editor, -1); break;
            case GLFW_KEY_DOWN: move_cursor_down(editor); break;
            case GLFW_KEY_UP: move_cursor_up(editor); break;
        } break;


        case GLFW_MOD_CONTROL: switch (key) {

            case GLFW_KEY_PAGE_UP: if editor.prev editor = editor.prev; break;
            case GLFW_KEY_PAGE_DOWN: if editor.next editor = editor.next; break;

            case GLFW_KEY_N: {
                let ed = texteditor_new();
                insert_texteditor(ed);
            } break;

            case GLFW_KEY_W: {

            } break;
        } break;

        case GLFW_MOD_ALT: switch (key) {
            case GLFW_KEY_DOWN: push_line_down(editor.cursor.line); break;
            case GLFW_KEY_UP: push_line_up(editor.cursor.line); break;
        } break;

    }
}

void on_drop(GLFWwindow* window, int32 path_count, char** paths) {

    glfwFocusWindow(window);

    for i in 0 .. path_count {
        let ed = texteditor_new();
        insert_texteditor(ed);

        load_file(editor, paths[i]);
    }
}

int32 main() {

    { // init keywords
        int32 i = 0;
        keywords = malloc(keywords_count * sizeof string);

        keywords[i++] = make_string("struct");
        keywords[i++] = make_string("enum");
        keywords[i++] = make_string("alloc");
        keywords[i++] = make_string("let");
        keywords[i++] = make_string("include");
        keywords[i++] = make_string("if");
        keywords[i++] = make_string("else");
        keywords[i++] = make_string("while");
        keywords[i++] = make_string("true");
        keywords[i++] = make_string("false");
        keywords[i++] = make_string("and");
        keywords[i++] = make_string("or");
        keywords[i++] = make_string("null");
        keywords[i++] = make_string("continue");
        keywords[i++] = make_string("break");
        keywords[i++] = make_string("return");
        keywords[i++] = make_string("declare");
        keywords[i++] = make_string("type");
        keywords[i++] = make_string("as");
        keywords[i++] = make_string("const");
        keywords[i++] = make_string("for");
        keywords[i++] = make_string("in");
        keywords[i++] = make_string("switch");
        keywords[i++] = make_string("default");
        keywords[i++] = make_string("case");
        keywords[i++] = make_string("goto");
        keywords[i++] = make_string("with");
        keywords[i++] = make_string("namespace");
        keywords[i++] = make_string("sizeof");

        if i != keywords_count {
            print("Something went wrong with keywords\n");
            return -1;
        }
    }


    editor = texteditor_new();
    editor.prev = editor;
    editor.next = editor;

    { // themes:

        ColorTheme programer_art;
        programer_art.background     = {30, 30, 30, 255} as Grax.Color;
        programer_art.word           = Grax.Red;
        programer_art.keyword        = Grax.Purple;
        programer_art.punctuation    = Grax.White;
        programer_art.number_literal = Grax.Cyan;
        programer_art.string_literal = Grax.Yellow;
        programer_art.comment        = Grax.Green;
        programer_art.unknown        = Grax.White;

        ColorTheme kimbie_dark;
        kimbie_dark.background     = Grax.rgba(0x221A0FFF);
        kimbie_dark.word           = Grax.rgba(0xDC3958FF); // blue: Grax.rgba(0x8AB1B0FF);
        kimbie_dark.keyword        = Grax.rgba(0x98676AFF);
        kimbie_dark.punctuation    = Grax.rgba(0xD3AF86FF);
        kimbie_dark.number_literal = Grax.rgba(0xF79A32FF);
        kimbie_dark.string_literal = Grax.rgba(0x889B4AFF);
        kimbie_dark.comment        = Grax.rgba(0xA57A4CFF);
        kimbie_dark.unknown        = Grax.rgba(0xFFFFFFFF);

        theme = *kimbie_dark;
    }



    Grax.init();
    glfwSetCharCallback(Grax.window, on_text_input);
    glfwSetKeyCallback(Grax.window, on_key_input);
    glfwSetDropCallback(Grax.window, on_drop);

    // glfwSetWindowOpacity(Grax.window, 0.5);

    glClearColor(theme.background.r as float32 / 255,
                 theme.background.g as float32 / 255,
                 theme.background.b as float32 / 255,
                 theme.background.a as float32 / 255);


    view_pos.x = 1;

    while Grax.loop() {

        // if Grax.key(GLFW_KEY_UP) view_pos.y += 0.1;
        // if Grax.key(GLFW_KEY_DOWN) view_pos.y -= 0.1;

        if Grax.key(GLFW_KEY_LEFT_CONTROL) {
            if Grax.key('-') {
                editor.glyph_height *= 0.9;
                view_pos.y = editor.cursor_pos.y * 0.9;
            } else if Grax.key('=') {
                editor.glyph_height *= 1.1;
                view_pos.y = editor.cursor_pos.y * 1.1;
            }
        }

        draw_texteditor(editor);
        // glUniform2f(glGetUniformLocation(Grax.shader.gl_handle, "view_pos"), view_pos.x, view_pos.y);

        view_pos.y = lerp(0.1, view_pos.y, editor.cursor_pos.y);

        Grax.dispatch_immediate();
    }

    return 0;
}
